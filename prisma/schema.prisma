generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  password      String?
  role          UserRole  @default(USER)
  province      String?
  organization  String?
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  contents      Content[]
  comments      Comment[]
  bookmarks     Bookmark[]
  submissions   UserSubmission[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model OTPVerification {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expires   DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([phone, code])
}

model Content {
  id          String        @id @default(cuid())
  title       String
  description String?
  content     String
  type        ContentType
  category    String
  tags        String
  fileUrl     String?
  fileType    String?
  fileSize    Int?
  thumbnailUrl String?
  imageUrl    String?
  videoUrl    String?
  isPublic    Boolean       @default(true)
  isFeatured  Boolean       @default(false)
  viewCount   Int           @default(0)
  downloadCount Int         @default(0)
  status      ContentStatus @default(DRAFT)
  authorId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  author    User       @relation(fields: [authorId], references: [id])
  comments  Comment[]
  bookmarks Bookmark[]

  @@index([category])
  @@index([type])
  @@index([status])
  @@index([isPublic])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  contentId String
  userId    String
  parentId  String?
  isApproved Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User     @relation(fields: [userId], references: [id])
  parent  Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@index([contentId])
  @@index([userId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
}

model UserSubmission {
  id          String           @id @default(cuid())
  title       String
  description String
  content     String
  type        ContentType
  category    String
  tags        String
  fileUrl     String?
  status      SubmissionStatus @default(PENDING)
  userId      String
  reviewedBy  String?
  reviewNotes String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([userId])
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  userId    String?
  isRead    Boolean          @default(false)
  isGlobal  Boolean          @default(false)
  scheduledFor DateTime?
  sentAt    DateTime?
  createdAt DateTime         @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([isGlobal])
  @@index([scheduledFor])
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  contentId String?
  userId    String?
  metadata  Json?
  createdAt DateTime @default(now())

  @@index([event])
  @@index([contentId])
  @@index([createdAt])
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
}

enum ContentType {
  ARTICLE
  VIDEO
  INFOGRAPHIC
  DOCUMENT
  STORY
  GUIDE
  POLICY
  NEWS
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  NEEDS_REVISION
}

enum NotificationType {
  CONTENT_PUBLISHED
  COMMENT_REPLY
  SUBMISSION_UPDATE
  SYSTEM_ANNOUNCEMENT
  NEWSLETTER
}